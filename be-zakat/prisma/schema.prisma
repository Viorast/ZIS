generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Models
model User {
  id           String    @id @default(uuid())
  fullName     String?   @map("full_name")
  gender       Gender?
  tempatLahir  String?   @map("tempat_lahir")
  tanggalLahir DateTime? @map("tanggal_lahir")
  nomorHp      String?   @map("nomor_hp")
  nomorKtp     String?   @map("nomor_ktp")
  alamat       String?
  email        String    @unique
  password     String
  fotoProfil   String?   @map("foto_profil")
  role         UserRole  @default(JAMAAH) // tambahkan role disini
  pengurusId   String?   @map("pengurus_id")
  isGoogleAuth Boolean   @default(false)
  googleId     String?   @unique

  // Reset Password Fields
  resetToken      String?   @map("reset_token")
  resetTokenExpiry DateTime? @map("reset_token_expiry")

  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  infaqTransactions          InfaqTransaction[]
  zakatTransactions          ZakatTransaction[]
  processedInfaqTransactions InfaqTransaction[] @relation("ProcessedInfaqTransactions")
  processedZakatTransactions ZakatTransaction[] @relation("ProcessedZakatTransactions")

  @@map("users")
}

model InfaqTransaction {
  id                String            @id @default(uuid())
  userId            String            @map("user_id")
  processedById     String?           @map("processed_by_id")
  nominal           Decimal           @db.Decimal(15, 2)
  paymentMethod     PaymentMethod     @map("payment_method")
  status            TransactionStatus
  buktiPembayaran   String?           @map("bukti_pembayaran") // URL/path untuk bukti pembayaran
  midtransId        String?           @map("midtrans_id") // ID transaksi dari Midtrans
  catatan           String? // Catatan tambahan dari donatur
  tanggalPembayaran DateTime?         @map("tanggal_pembayaran")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  // Relations
  user        User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  processedBy User? @relation("ProcessedInfaqTransactions", fields: [processedById], references: [id])

  @@map("infaq_transactions")
}

model ZakatTransaction {
  id                String            @id @default(uuid())
  userId            String            @map("user_id")
  processedById     String?           @map("processed_by_id")
  jenisZakat        ZakatType         @map("jenis_zakat")
  nominal           Decimal           @db.Decimal(15, 2)
  paymentMethod     PaymentMethod     @map("payment_method")
  status            TransactionStatus
  buktiPembayaran   String?           @map("bukti_pembayaran")
  midtransId        String?           @map("midtrans_id")
  catatan           String?
  tanggalPembayaran DateTime?         @map("tanggal_pembayaran")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  // Relations
  user        User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  processedBy User? @relation("ProcessedZakatTransactions", fields: [processedById], references: [id])

  @@map("zakat_transactions")
}

model ZakatConfig {
  id         String    @id @default(uuid())
  jenisZakat ZakatType
  key        String
  value      Float
  satuan     String?
  updatedAt  DateTime  @updatedAt
  createdAt  DateTime  @default(now())

  @@unique([jenisZakat, key])
}

// Enums

enum UserRole {
  JAMAAH
  PENGURUS
  BENDAHARA
  SUPER_ADMIN
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN
}

enum PaymentMethod {
  MIDTRANS // Transaksi otomatis (online)
  QRIS_MANUAL // Scan QRIS masjid + upload bukti
  TUNAI // Diinput manual oleh petugas
}

enum TransactionStatus {
  PENDING
  SUCCESS
  EXPIRED
  CANCELLED
  FAILED
}

enum ZakatType {
  FITRAH
  MAAL
  PENGHASILAN
  EMAS
  FIDYAH
}
